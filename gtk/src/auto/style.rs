// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::{StyleContext};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "GtkStyle")]
    pub struct Style(Object<ffi::GtkStyle, ffi::GtkStyleClass>);

    match fn {
        type_ => || ffi::gtk_style_get_type(),
    }
}

impl Style {
        pub const NONE: Option<&'static Style> = None;
    
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Style>> Sealed for T {}
}

pub trait StyleExt: IsA<Style> + sealed::Sealed + 'static {
    //#[doc(alias = "gtk_style_get")]
    //fn get(&self, widget_type: glib::types::Type, first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) {
    //    unsafe { TODO: call ffi:gtk_style_get() }
    //}

    #[doc(alias = "gtk_style_get_style_property")]
    #[doc(alias = "get_style_property")]
    fn style_property(&self, widget_type: glib::types::Type, property_name: &str) -> glib::Value {
        unsafe {
            let mut value = glib::Value::uninitialized();
            ffi::gtk_style_get_style_property(self.as_ref().to_glib_none().0, widget_type.into_glib(), property_name.to_glib_none().0, value.to_glib_none_mut().0);
            value
        }
    }

    //#[doc(alias = "gtk_style_get_valist")]
    //#[doc(alias = "get_valist")]
    //fn valist(&self, widget_type: glib::types::Type, first_property_name: &str, var_args: /*Unknown conversion*//*Unimplemented*/Unsupported) {
    //    unsafe { TODO: call ffi:gtk_style_get_valist() }
    //}

    #[doc(alias = "gtk_style_has_context")]
    fn has_context(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_style_has_context(self.as_ref().to_glib_none().0))
        }
    }

    fn context(&self) -> Option<StyleContext> {
        ObjectExt::property(self.as_ref(), "context")
    }

    #[doc(alias = "realize")]
    fn connect_realize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn realize_trampoline<P: IsA<Style>, F: Fn(&P) + 'static>(this: *mut ffi::GtkStyle, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Style::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"realize\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(realize_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "unrealize")]
    fn connect_unrealize<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn unrealize_trampoline<P: IsA<Style>, F: Fn(&P) + 'static>(this: *mut ffi::GtkStyle, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Style::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"unrealize\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(unrealize_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Style>> StyleExt for O {}
