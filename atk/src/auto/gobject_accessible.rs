// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../gir-files
// DO NOT EDIT

use crate::{ffi,Object};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "AtkGObjectAccessible")]
    pub struct GObjectAccessible(Object<ffi::AtkGObjectAccessible, ffi::AtkGObjectAccessibleClass>) @extends Object;

    match fn {
        type_ => || ffi::atk_gobject_accessible_get_type(),
    }
}

impl GObjectAccessible {
        pub const NONE: Option<&'static GObjectAccessible> = None;
    

    #[doc(alias = "atk_gobject_accessible_for_object")]
    pub fn for_object(obj: &impl IsA<glib::Object>) -> Option<Object> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::atk_gobject_accessible_for_object(obj.as_ref().to_glib_none().0))
        }
    }
}

pub trait GObjectAccessibleExt: IsA<GObjectAccessible> + 'static {
    #[doc(alias = "atk_gobject_accessible_get_object")]
    #[doc(alias = "get_object")]
    fn object(&self) -> Option<glib::Object> {
        unsafe {
            from_glib_none(ffi::atk_gobject_accessible_get_object(self.as_ref().to_glib_none().0))
        }
    }
}

impl<O: IsA<GObjectAccessible>> GObjectAccessibleExt for O {}
